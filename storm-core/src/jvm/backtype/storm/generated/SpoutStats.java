/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package backtype.storm.generated;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SpoutStats implements org.apache.thrift.TBase<SpoutStats, SpoutStats._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SpoutStats");

  private static final org.apache.thrift.protocol.TField ACKED_FIELD_DESC = new org.apache.thrift.protocol.TField("acked", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField FAILED_FIELD_DESC = new org.apache.thrift.protocol.TField("failed", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField COMPLETE_MS_AVG_FIELD_DESC = new org.apache.thrift.protocol.TField("complete_ms_avg", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField RECEIVE_QUEUE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("receive_queue_length", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField BATCH_TRANSFER_QUEUE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("batch_transfer_queue_length", org.apache.thrift.protocol.TType.MAP, (short)5);

  private Map<String,Map<String,Long>> acked; // required
  private Map<String,Map<String,Long>> failed; // required
  private Map<String,Map<String,Double>> complete_ms_avg; // required
  private Map<String,Map<String,Double>> receive_queue_length; // required
  private Map<String,Map<String,Double>> batch_transfer_queue_length; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACKED((short)1, "acked"),
    FAILED((short)2, "failed"),
    COMPLETE_MS_AVG((short)3, "complete_ms_avg"),
    RECEIVE_QUEUE_LENGTH((short)4, "receive_queue_length"),
    BATCH_TRANSFER_QUEUE_LENGTH((short)5, "batch_transfer_queue_length");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACKED
          return ACKED;
        case 2: // FAILED
          return FAILED;
        case 3: // COMPLETE_MS_AVG
          return COMPLETE_MS_AVG;
        case 4: // RECEIVE_QUEUE_LENGTH
          return RECEIVE_QUEUE_LENGTH;
        case 5: // BATCH_TRANSFER_QUEUE_LENGTH
          return BATCH_TRANSFER_QUEUE_LENGTH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACKED, new org.apache.thrift.meta_data.FieldMetaData("acked", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
    tmpMap.put(_Fields.FAILED, new org.apache.thrift.meta_data.FieldMetaData("failed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
    tmpMap.put(_Fields.COMPLETE_MS_AVG, new org.apache.thrift.meta_data.FieldMetaData("complete_ms_avg", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
    tmpMap.put(_Fields.RECEIVE_QUEUE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("receive_queue_length", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
    tmpMap.put(_Fields.BATCH_TRANSFER_QUEUE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("batch_transfer_queue_length", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SpoutStats.class, metaDataMap);
  }

  public SpoutStats() {
  }

  public SpoutStats(
    Map<String,Map<String,Long>> acked,
    Map<String,Map<String,Long>> failed,
    Map<String,Map<String,Double>> complete_ms_avg)
  {
    this();
    this.acked = acked;
    this.failed = failed;
    this.complete_ms_avg = complete_ms_avg;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpoutStats(SpoutStats other) {
    if (other.is_set_acked()) {
      Map<String,Map<String,Long>> __this__acked = new HashMap<String,Map<String,Long>>();
      for (Map.Entry<String, Map<String,Long>> other_element : other.acked.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<String,Long> other_element_value = other_element.getValue();

        String __this__acked_copy_key = other_element_key;

        Map<String,Long> __this__acked_copy_value = new HashMap<String,Long>();
        for (Map.Entry<String, Long> other_element_value_element : other_element_value.entrySet()) {

          String other_element_value_element_key = other_element_value_element.getKey();
          Long other_element_value_element_value = other_element_value_element.getValue();

          String __this__acked_copy_value_copy_key = other_element_value_element_key;

          Long __this__acked_copy_value_copy_value = other_element_value_element_value;

          __this__acked_copy_value.put(__this__acked_copy_value_copy_key, __this__acked_copy_value_copy_value);
        }

        __this__acked.put(__this__acked_copy_key, __this__acked_copy_value);
      }
      this.acked = __this__acked;
    }
    if (other.is_set_failed()) {
      Map<String,Map<String,Long>> __this__failed = new HashMap<String,Map<String,Long>>();
      for (Map.Entry<String, Map<String,Long>> other_element : other.failed.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<String,Long> other_element_value = other_element.getValue();

        String __this__failed_copy_key = other_element_key;

        Map<String,Long> __this__failed_copy_value = new HashMap<String,Long>();
        for (Map.Entry<String, Long> other_element_value_element : other_element_value.entrySet()) {

          String other_element_value_element_key = other_element_value_element.getKey();
          Long other_element_value_element_value = other_element_value_element.getValue();

          String __this__failed_copy_value_copy_key = other_element_value_element_key;

          Long __this__failed_copy_value_copy_value = other_element_value_element_value;

          __this__failed_copy_value.put(__this__failed_copy_value_copy_key, __this__failed_copy_value_copy_value);
        }

        __this__failed.put(__this__failed_copy_key, __this__failed_copy_value);
      }
      this.failed = __this__failed;
    }
    if (other.is_set_complete_ms_avg()) {
      Map<String,Map<String,Double>> __this__complete_ms_avg = new HashMap<String,Map<String,Double>>();
      for (Map.Entry<String, Map<String,Double>> other_element : other.complete_ms_avg.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<String,Double> other_element_value = other_element.getValue();

        String __this__complete_ms_avg_copy_key = other_element_key;

        Map<String,Double> __this__complete_ms_avg_copy_value = new HashMap<String,Double>();
        for (Map.Entry<String, Double> other_element_value_element : other_element_value.entrySet()) {

          String other_element_value_element_key = other_element_value_element.getKey();
          Double other_element_value_element_value = other_element_value_element.getValue();

          String __this__complete_ms_avg_copy_value_copy_key = other_element_value_element_key;

          Double __this__complete_ms_avg_copy_value_copy_value = other_element_value_element_value;

          __this__complete_ms_avg_copy_value.put(__this__complete_ms_avg_copy_value_copy_key, __this__complete_ms_avg_copy_value_copy_value);
        }

        __this__complete_ms_avg.put(__this__complete_ms_avg_copy_key, __this__complete_ms_avg_copy_value);
      }
      this.complete_ms_avg = __this__complete_ms_avg;
    }
    if (other.is_set_receive_queue_length()) {
      Map<String,Map<String,Double>> __this__receive_queue_length = new HashMap<String,Map<String,Double>>();
      for (Map.Entry<String, Map<String,Double>> other_element : other.receive_queue_length.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<String,Double> other_element_value = other_element.getValue();

        String __this__receive_queue_length_copy_key = other_element_key;

        Map<String,Double> __this__receive_queue_length_copy_value = new HashMap<String,Double>();
        for (Map.Entry<String, Double> other_element_value_element : other_element_value.entrySet()) {

          String other_element_value_element_key = other_element_value_element.getKey();
          Double other_element_value_element_value = other_element_value_element.getValue();

          String __this__receive_queue_length_copy_value_copy_key = other_element_value_element_key;

          Double __this__receive_queue_length_copy_value_copy_value = other_element_value_element_value;

          __this__receive_queue_length_copy_value.put(__this__receive_queue_length_copy_value_copy_key, __this__receive_queue_length_copy_value_copy_value);
        }

        __this__receive_queue_length.put(__this__receive_queue_length_copy_key, __this__receive_queue_length_copy_value);
      }
      this.receive_queue_length = __this__receive_queue_length;
    }
    if (other.is_set_batch_transfer_queue_length()) {
      Map<String,Map<String,Double>> __this__batch_transfer_queue_length = new HashMap<String,Map<String,Double>>();
      for (Map.Entry<String, Map<String,Double>> other_element : other.batch_transfer_queue_length.entrySet()) {

        String other_element_key = other_element.getKey();
        Map<String,Double> other_element_value = other_element.getValue();

        String __this__batch_transfer_queue_length_copy_key = other_element_key;

        Map<String,Double> __this__batch_transfer_queue_length_copy_value = new HashMap<String,Double>();
        for (Map.Entry<String, Double> other_element_value_element : other_element_value.entrySet()) {

          String other_element_value_element_key = other_element_value_element.getKey();
          Double other_element_value_element_value = other_element_value_element.getValue();

          String __this__batch_transfer_queue_length_copy_value_copy_key = other_element_value_element_key;

          Double __this__batch_transfer_queue_length_copy_value_copy_value = other_element_value_element_value;

          __this__batch_transfer_queue_length_copy_value.put(__this__batch_transfer_queue_length_copy_value_copy_key, __this__batch_transfer_queue_length_copy_value_copy_value);
        }

        __this__batch_transfer_queue_length.put(__this__batch_transfer_queue_length_copy_key, __this__batch_transfer_queue_length_copy_value);
      }
      this.batch_transfer_queue_length = __this__batch_transfer_queue_length;
    }
  }

  public SpoutStats deepCopy() {
    return new SpoutStats(this);
  }

  @Override
  public void clear() {
    this.acked = null;
    this.failed = null;
    this.complete_ms_avg = null;
    this.receive_queue_length = null;
    this.batch_transfer_queue_length = null;
  }

  public int get_acked_size() {
    return (this.acked == null) ? 0 : this.acked.size();
  }

  public void put_to_acked(String key, Map<String,Long> val) {
    if (this.acked == null) {
      this.acked = new HashMap<String,Map<String,Long>>();
    }
    this.acked.put(key, val);
  }

  public Map<String,Map<String,Long>> get_acked() {
    return this.acked;
  }

  public void set_acked(Map<String,Map<String,Long>> acked) {
    this.acked = acked;
  }

  public void unset_acked() {
    this.acked = null;
  }

  /** Returns true if field acked is set (has been assigned a value) and false otherwise */
  public boolean is_set_acked() {
    return this.acked != null;
  }

  public void set_acked_isSet(boolean value) {
    if (!value) {
      this.acked = null;
    }
  }

  public int get_failed_size() {
    return (this.failed == null) ? 0 : this.failed.size();
  }

  public void put_to_failed(String key, Map<String,Long> val) {
    if (this.failed == null) {
      this.failed = new HashMap<String,Map<String,Long>>();
    }
    this.failed.put(key, val);
  }

  public Map<String,Map<String,Long>> get_failed() {
    return this.failed;
  }

  public void set_failed(Map<String,Map<String,Long>> failed) {
    this.failed = failed;
  }

  public void unset_failed() {
    this.failed = null;
  }

  /** Returns true if field failed is set (has been assigned a value) and false otherwise */
  public boolean is_set_failed() {
    return this.failed != null;
  }

  public void set_failed_isSet(boolean value) {
    if (!value) {
      this.failed = null;
    }
  }

  public int get_complete_ms_avg_size() {
    return (this.complete_ms_avg == null) ? 0 : this.complete_ms_avg.size();
  }

  public void put_to_complete_ms_avg(String key, Map<String,Double> val) {
    if (this.complete_ms_avg == null) {
      this.complete_ms_avg = new HashMap<String,Map<String,Double>>();
    }
    this.complete_ms_avg.put(key, val);
  }

  public Map<String,Map<String,Double>> get_complete_ms_avg() {
    return this.complete_ms_avg;
  }

  public void set_complete_ms_avg(Map<String,Map<String,Double>> complete_ms_avg) {
    this.complete_ms_avg = complete_ms_avg;
  }

  public void unset_complete_ms_avg() {
    this.complete_ms_avg = null;
  }

  /** Returns true if field complete_ms_avg is set (has been assigned a value) and false otherwise */
  public boolean is_set_complete_ms_avg() {
    return this.complete_ms_avg != null;
  }

  public void set_complete_ms_avg_isSet(boolean value) {
    if (!value) {
      this.complete_ms_avg = null;
    }
  }

  public int get_receive_queue_length_size() {
    return (this.receive_queue_length == null) ? 0 : this.receive_queue_length.size();
  }

  public void put_to_receive_queue_length(String key, Map<String,Double> val) {
    if (this.receive_queue_length == null) {
      this.receive_queue_length = new HashMap<String,Map<String,Double>>();
    }
    this.receive_queue_length.put(key, val);
  }

  public Map<String,Map<String,Double>> get_receive_queue_length() {
    return this.receive_queue_length;
  }

  public void set_receive_queue_length(Map<String,Map<String,Double>> receive_queue_length) {
    this.receive_queue_length = receive_queue_length;
  }

  public void unset_receive_queue_length() {
    this.receive_queue_length = null;
  }

  /** Returns true if field receive_queue_length is set (has been assigned a value) and false otherwise */
  public boolean is_set_receive_queue_length() {
    return this.receive_queue_length != null;
  }

  public void set_receive_queue_length_isSet(boolean value) {
    if (!value) {
      this.receive_queue_length = null;
    }
  }

  public int get_batch_transfer_queue_length_size() {
    return (this.batch_transfer_queue_length == null) ? 0 : this.batch_transfer_queue_length.size();
  }

  public void put_to_batch_transfer_queue_length(String key, Map<String,Double> val) {
    if (this.batch_transfer_queue_length == null) {
      this.batch_transfer_queue_length = new HashMap<String,Map<String,Double>>();
    }
    this.batch_transfer_queue_length.put(key, val);
  }

  public Map<String,Map<String,Double>> get_batch_transfer_queue_length() {
    return this.batch_transfer_queue_length;
  }

  public void set_batch_transfer_queue_length(Map<String,Map<String,Double>> batch_transfer_queue_length) {
    this.batch_transfer_queue_length = batch_transfer_queue_length;
  }

  public void unset_batch_transfer_queue_length() {
    this.batch_transfer_queue_length = null;
  }

  /** Returns true if field batch_transfer_queue_length is set (has been assigned a value) and false otherwise */
  public boolean is_set_batch_transfer_queue_length() {
    return this.batch_transfer_queue_length != null;
  }

  public void set_batch_transfer_queue_length_isSet(boolean value) {
    if (!value) {
      this.batch_transfer_queue_length = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACKED:
      if (value == null) {
        unset_acked();
      } else {
        set_acked((Map<String,Map<String,Long>>)value);
      }
      break;

    case FAILED:
      if (value == null) {
        unset_failed();
      } else {
        set_failed((Map<String,Map<String,Long>>)value);
      }
      break;

    case COMPLETE_MS_AVG:
      if (value == null) {
        unset_complete_ms_avg();
      } else {
        set_complete_ms_avg((Map<String,Map<String,Double>>)value);
      }
      break;

    case RECEIVE_QUEUE_LENGTH:
      if (value == null) {
        unset_receive_queue_length();
      } else {
        set_receive_queue_length((Map<String,Map<String,Double>>)value);
      }
      break;

    case BATCH_TRANSFER_QUEUE_LENGTH:
      if (value == null) {
        unset_batch_transfer_queue_length();
      } else {
        set_batch_transfer_queue_length((Map<String,Map<String,Double>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACKED:
      return get_acked();

    case FAILED:
      return get_failed();

    case COMPLETE_MS_AVG:
      return get_complete_ms_avg();

    case RECEIVE_QUEUE_LENGTH:
      return get_receive_queue_length();

    case BATCH_TRANSFER_QUEUE_LENGTH:
      return get_batch_transfer_queue_length();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACKED:
      return is_set_acked();
    case FAILED:
      return is_set_failed();
    case COMPLETE_MS_AVG:
      return is_set_complete_ms_avg();
    case RECEIVE_QUEUE_LENGTH:
      return is_set_receive_queue_length();
    case BATCH_TRANSFER_QUEUE_LENGTH:
      return is_set_batch_transfer_queue_length();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SpoutStats)
      return this.equals((SpoutStats)that);
    return false;
  }

  public boolean equals(SpoutStats that) {
    if (that == null)
      return false;

    boolean this_present_acked = true && this.is_set_acked();
    boolean that_present_acked = true && that.is_set_acked();
    if (this_present_acked || that_present_acked) {
      if (!(this_present_acked && that_present_acked))
        return false;
      if (!this.acked.equals(that.acked))
        return false;
    }

    boolean this_present_failed = true && this.is_set_failed();
    boolean that_present_failed = true && that.is_set_failed();
    if (this_present_failed || that_present_failed) {
      if (!(this_present_failed && that_present_failed))
        return false;
      if (!this.failed.equals(that.failed))
        return false;
    }

    boolean this_present_complete_ms_avg = true && this.is_set_complete_ms_avg();
    boolean that_present_complete_ms_avg = true && that.is_set_complete_ms_avg();
    if (this_present_complete_ms_avg || that_present_complete_ms_avg) {
      if (!(this_present_complete_ms_avg && that_present_complete_ms_avg))
        return false;
      if (!this.complete_ms_avg.equals(that.complete_ms_avg))
        return false;
    }

    boolean this_present_receive_queue_length = true && this.is_set_receive_queue_length();
    boolean that_present_receive_queue_length = true && that.is_set_receive_queue_length();
    if (this_present_receive_queue_length || that_present_receive_queue_length) {
      if (!(this_present_receive_queue_length && that_present_receive_queue_length))
        return false;
      if (!this.receive_queue_length.equals(that.receive_queue_length))
        return false;
    }

    boolean this_present_batch_transfer_queue_length = true && this.is_set_batch_transfer_queue_length();
    boolean that_present_batch_transfer_queue_length = true && that.is_set_batch_transfer_queue_length();
    if (this_present_batch_transfer_queue_length || that_present_batch_transfer_queue_length) {
      if (!(this_present_batch_transfer_queue_length && that_present_batch_transfer_queue_length))
        return false;
      if (!this.batch_transfer_queue_length.equals(that.batch_transfer_queue_length))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_acked = true && (is_set_acked());
    builder.append(present_acked);
    if (present_acked)
      builder.append(acked);

    boolean present_failed = true && (is_set_failed());
    builder.append(present_failed);
    if (present_failed)
      builder.append(failed);

    boolean present_complete_ms_avg = true && (is_set_complete_ms_avg());
    builder.append(present_complete_ms_avg);
    if (present_complete_ms_avg)
      builder.append(complete_ms_avg);

    boolean present_receive_queue_length = true && (is_set_receive_queue_length());
    builder.append(present_receive_queue_length);
    if (present_receive_queue_length)
      builder.append(receive_queue_length);

    boolean present_batch_transfer_queue_length = true && (is_set_batch_transfer_queue_length());
    builder.append(present_batch_transfer_queue_length);
    if (present_batch_transfer_queue_length)
      builder.append(batch_transfer_queue_length);

    return builder.toHashCode();
  }

  public int compareTo(SpoutStats other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SpoutStats typedOther = (SpoutStats)other;

    lastComparison = Boolean.valueOf(is_set_acked()).compareTo(typedOther.is_set_acked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_acked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acked, typedOther.acked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_failed()).compareTo(typedOther.is_set_failed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_failed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failed, typedOther.failed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_complete_ms_avg()).compareTo(typedOther.is_set_complete_ms_avg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_complete_ms_avg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.complete_ms_avg, typedOther.complete_ms_avg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_receive_queue_length()).compareTo(typedOther.is_set_receive_queue_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_receive_queue_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receive_queue_length, typedOther.receive_queue_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_batch_transfer_queue_length()).compareTo(typedOther.is_set_batch_transfer_queue_length());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_batch_transfer_queue_length()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batch_transfer_queue_length, typedOther.batch_transfer_queue_length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ACKED
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map115 = iprot.readMapBegin();
              this.acked = new HashMap<String,Map<String,Long>>(2*_map115.size);
              for (int _i116 = 0; _i116 < _map115.size; ++_i116)
              {
                String _key117; // required
                Map<String,Long> _val118; // required
                _key117 = iprot.readString();
                {
                  org.apache.thrift.protocol.TMap _map119 = iprot.readMapBegin();
                  _val118 = new HashMap<String,Long>(2*_map119.size);
                  for (int _i120 = 0; _i120 < _map119.size; ++_i120)
                  {
                    String _key121; // required
                    long _val122; // required
                    _key121 = iprot.readString();
                    _val122 = iprot.readI64();
                    _val118.put(_key121, _val122);
                  }
                  iprot.readMapEnd();
                }
                this.acked.put(_key117, _val118);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FAILED
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map123 = iprot.readMapBegin();
              this.failed = new HashMap<String,Map<String,Long>>(2*_map123.size);
              for (int _i124 = 0; _i124 < _map123.size; ++_i124)
              {
                String _key125; // required
                Map<String,Long> _val126; // required
                _key125 = iprot.readString();
                {
                  org.apache.thrift.protocol.TMap _map127 = iprot.readMapBegin();
                  _val126 = new HashMap<String,Long>(2*_map127.size);
                  for (int _i128 = 0; _i128 < _map127.size; ++_i128)
                  {
                    String _key129; // required
                    long _val130; // required
                    _key129 = iprot.readString();
                    _val130 = iprot.readI64();
                    _val126.put(_key129, _val130);
                  }
                  iprot.readMapEnd();
                }
                this.failed.put(_key125, _val126);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // COMPLETE_MS_AVG
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map131 = iprot.readMapBegin();
              this.complete_ms_avg = new HashMap<String,Map<String,Double>>(2*_map131.size);
              for (int _i132 = 0; _i132 < _map131.size; ++_i132)
              {
                String _key133; // required
                Map<String,Double> _val134; // required
                _key133 = iprot.readString();
                {
                  org.apache.thrift.protocol.TMap _map135 = iprot.readMapBegin();
                  _val134 = new HashMap<String,Double>(2*_map135.size);
                  for (int _i136 = 0; _i136 < _map135.size; ++_i136)
                  {
                    String _key137; // required
                    double _val138; // required
                    _key137 = iprot.readString();
                    _val138 = iprot.readDouble();
                    _val134.put(_key137, _val138);
                  }
                  iprot.readMapEnd();
                }
                this.complete_ms_avg.put(_key133, _val134);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // RECEIVE_QUEUE_LENGTH
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map139 = iprot.readMapBegin();
              this.receive_queue_length = new HashMap<String,Map<String,Double>>(2*_map139.size);
              for (int _i140 = 0; _i140 < _map139.size; ++_i140)
              {
                String _key141; // required
                Map<String,Double> _val142; // required
                _key141 = iprot.readString();
                {
                  org.apache.thrift.protocol.TMap _map143 = iprot.readMapBegin();
                  _val142 = new HashMap<String,Double>(2*_map143.size);
                  for (int _i144 = 0; _i144 < _map143.size; ++_i144)
                  {
                    String _key145; // required
                    double _val146; // required
                    _key145 = iprot.readString();
                    _val146 = iprot.readDouble();
                    _val142.put(_key145, _val146);
                  }
                  iprot.readMapEnd();
                }
                this.receive_queue_length.put(_key141, _val142);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // BATCH_TRANSFER_QUEUE_LENGTH
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map147 = iprot.readMapBegin();
              this.batch_transfer_queue_length = new HashMap<String,Map<String,Double>>(2*_map147.size);
              for (int _i148 = 0; _i148 < _map147.size; ++_i148)
              {
                String _key149; // required
                Map<String,Double> _val150; // required
                _key149 = iprot.readString();
                {
                  org.apache.thrift.protocol.TMap _map151 = iprot.readMapBegin();
                  _val150 = new HashMap<String,Double>(2*_map151.size);
                  for (int _i152 = 0; _i152 < _map151.size; ++_i152)
                  {
                    String _key153; // required
                    double _val154; // required
                    _key153 = iprot.readString();
                    _val154 = iprot.readDouble();
                    _val150.put(_key153, _val154);
                  }
                  iprot.readMapEnd();
                }
                this.batch_transfer_queue_length.put(_key149, _val150);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.acked != null) {
      oprot.writeFieldBegin(ACKED_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, this.acked.size()));
        for (Map.Entry<String, Map<String,Long>> _iter155 : this.acked.entrySet())
        {
          oprot.writeString(_iter155.getKey());
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, _iter155.getValue().size()));
            for (Map.Entry<String, Long> _iter156 : _iter155.getValue().entrySet())
            {
              oprot.writeString(_iter156.getKey());
              oprot.writeI64(_iter156.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.failed != null) {
      oprot.writeFieldBegin(FAILED_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, this.failed.size()));
        for (Map.Entry<String, Map<String,Long>> _iter157 : this.failed.entrySet())
        {
          oprot.writeString(_iter157.getKey());
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, _iter157.getValue().size()));
            for (Map.Entry<String, Long> _iter158 : _iter157.getValue().entrySet())
            {
              oprot.writeString(_iter158.getKey());
              oprot.writeI64(_iter158.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.complete_ms_avg != null) {
      oprot.writeFieldBegin(COMPLETE_MS_AVG_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, this.complete_ms_avg.size()));
        for (Map.Entry<String, Map<String,Double>> _iter159 : this.complete_ms_avg.entrySet())
        {
          oprot.writeString(_iter159.getKey());
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, _iter159.getValue().size()));
            for (Map.Entry<String, Double> _iter160 : _iter159.getValue().entrySet())
            {
              oprot.writeString(_iter160.getKey());
              oprot.writeDouble(_iter160.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.receive_queue_length != null) {
      if (is_set_receive_queue_length()) {
        oprot.writeFieldBegin(RECEIVE_QUEUE_LENGTH_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, this.receive_queue_length.size()));
          for (Map.Entry<String, Map<String,Double>> _iter161 : this.receive_queue_length.entrySet())
          {
            oprot.writeString(_iter161.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, _iter161.getValue().size()));
              for (Map.Entry<String, Double> _iter162 : _iter161.getValue().entrySet())
              {
                oprot.writeString(_iter162.getKey());
                oprot.writeDouble(_iter162.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.batch_transfer_queue_length != null) {
      if (is_set_batch_transfer_queue_length()) {
        oprot.writeFieldBegin(BATCH_TRANSFER_QUEUE_LENGTH_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, this.batch_transfer_queue_length.size()));
          for (Map.Entry<String, Map<String,Double>> _iter163 : this.batch_transfer_queue_length.entrySet())
          {
            oprot.writeString(_iter163.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, _iter163.getValue().size()));
              for (Map.Entry<String, Double> _iter164 : _iter163.getValue().entrySet())
              {
                oprot.writeString(_iter164.getKey());
                oprot.writeDouble(_iter164.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SpoutStats(");
    boolean first = true;

    sb.append("acked:");
    if (this.acked == null) {
      sb.append("null");
    } else {
      sb.append(this.acked);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("failed:");
    if (this.failed == null) {
      sb.append("null");
    } else {
      sb.append(this.failed);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("complete_ms_avg:");
    if (this.complete_ms_avg == null) {
      sb.append("null");
    } else {
      sb.append(this.complete_ms_avg);
    }
    first = false;
    if (is_set_receive_queue_length()) {
      if (!first) sb.append(", ");
      sb.append("receive_queue_length:");
      if (this.receive_queue_length == null) {
        sb.append("null");
      } else {
        sb.append(this.receive_queue_length);
      }
      first = false;
    }
    if (is_set_batch_transfer_queue_length()) {
      if (!first) sb.append(", ");
      sb.append("batch_transfer_queue_length:");
      if (this.batch_transfer_queue_length == null) {
        sb.append("null");
      } else {
        sb.append(this.batch_transfer_queue_length);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_acked()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'acked' is unset! Struct:" + toString());
    }

    if (!is_set_failed()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'failed' is unset! Struct:" + toString());
    }

    if (!is_set_complete_ms_avg()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'complete_ms_avg' is unset! Struct:" + toString());
    }

  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

